{{ $ := sdict . }}
{{if not .User.ID}}
    {{return}}
{{end}}
{{/*"{{ $arg := index ( shuffle ( cslice ( json .Message ) ( json .Channel ) ( json .Member ) ) ) 0 }}"*/}}
{{/*"{{ sendMessage 1051352470221230141 ( joinStr "\n" "DEBUG: Message recieved:```json" $arg "```" ) }}"*/}}

{{ define "devtest" }}
    {{ $db := sdict 
        "OnServer" true
        "Agreed" false
        "Staff" false
    }}
    {{ with ( dbGet .User.ID "member" ) }}
        {{ $db = .Value }}
    {{ end }}
    {{ if not $db.Staff }}
        {{ sendMessage nil "You don't have permission to use that command!" }}
        {{ return }}
    {{ end }}
    {{ sendMessage .Channel.ID ( cembed "description" "DEBUG" ) }}
{{ end }}

{{ define "registerstaff" }}
    {{ if not ( hasPermissions .Permissions.Administrator ) }}
        {{ sendMessage nil "You don't have permission to use that command!" }}
        {{ return }}
    {{ end }}
    {{ if not .CmdArgs }}
        {{ sendMessage nil ( printf "Invalid syntax!\nUsage: `%s%s [User] ...` (Multiple selections available)" .ServerPrefix .Cmd ) }}
    {{ end }}
    {{ $out := cslice }}
    {{ range .CmdArgs }}
        {{ try }}
            {{ with userArg . }}
                {{ $db := sdict
                    "OnServer" true
                    "Agreed" true
                    "Staff" true
                }}
                {{ with dbGet .ID "member" }}
                    {{ $db = . }}
                {{ end }}
                {{ $db.Set "Staff" $.Register }}
                {{ dbSet .ID "member" $db }}
                {{ $reg := "Unregistered" }}
                {{ if .Register }}
                    {{ $reg = "Registered" }}
                {{ end }}
                {{ $out = $out.Append ( printf "%s **%s** as a staff member." $reg .String ) }}
            {{ else }}
                {{ $out = $out.Append ( printf "Failed to modify registration of **%s** as a staff member." . ) }}
            {{ end }}
        {{ catch }}
            {{ $out = $out.Append ( printf "Failed to modify registration of **%s** as a staff member." . ) }}
        {{ end }}
    {{ end }}
{{ end }}

{{ define "rank" }}
    {{ $user := or ( index .CmdArgs 0 | userArg ) .User }}
    {{ $xp := ( dbGet $user.ID "xp" ).Value | toInt }}
    {{ $rank := dbRank ( sdict "pattern" "xp" ) $.user.ID "xp" }}
    {{ $level := ( dbGet $user.ID "levelling" ).Value.LastLevel }}
    {{ $progress := ( add $xp ( mult -1 ( .Levels.Get $level ) ) ) }}
    {{ $required := ( .Levels.Get ( add $level 1 ) ) }}
    {{ $progressPercent := fdiv $progress $required | mult 100 | round }}
    {{ $progressTens := fdiv $progressPercent 10 | round }}
    {{ $diff := sub $required $xp }}
    {{ $diffPercent := sub 10 $progressTens }}
    {{ $bar := cslice }}
    {{ range ( seq $progressTens ) }}
        {{ $bar = $bar.Append "ðŸŸ©" }}
    {{ end }}
    {{ range ( seq $diffPercent ) }}
        {{ $bar = $bar.Append "â¬œ" }}
    {{ end }}
    {{ sendMessage nil ( cembed
    "title" ( printf "%s is #%d in %s" ( or $.Member.Nick $.User.Username ) $rank $.Guild.Name )
    "thumbnail" ( sdict "url" ( .User.AvatarURL "1024" ) )
    "description" ( printf "They have **%d** total XP" )
    "fields" ( cslice
    ( sdict
        "name" $level
        "value" ( printf "Current level\n%d XP" ( .Levels.Get $level ) )
        "inline" true
    )
    ( sdict
        "name" "\u200b"
        "value" ( printf "%d more XP to level up" $diff )
        "inline" true
    )
    ( sdict
        "name" ( add $level 1 )
        "value" ( printf "Next level\n%d XP" $required )
        "inline" true
    )
    ( sdict
        "name" ( printf "%d%% of the way!" )
        "value" $bar
    )
    )
    "color" ( randInt 0xFFFFFF )
) }}
{{ end }}


{{ define "setCmdContext" }}
    {{ $ := sdict . }}
    {{ $.Set "Args" ( split .Message.Content " " ) }}
    {{ if gt ( len $.Args ) 1 }}
        {{ $.Set "CmdArgs" ( slice $.Args 1 ) }}
        {{ $.Set "StrippedMsg" ( joinStr " " $.CmdArgs ) }}
    {{ end }}
    {{ $.Set "Cmd" ( slice ( index $.Args 0 ) ( len .ServerPrefix ) ) }}
    {{ return $ }}
{{ end }}

{{ $customCommands := cslice }}

{{ $customCommands = $customCommands.AppendSlice ( cslice
( sdict
    "Type" "Command"
    "Trigger" "Devtest"
    "Aliases" cslice
    "Template" "devtest"
)
( sdict
    "Type" "Command"
    "Trigger" "RegisterStaff"
    "Aliases" ( cslice "staff" "rstaff" "addstaff" )
    "Template" "registerstaff"
)
( sdict
    "Type" "Command"
    "Trigger" "UnregisterStaff"
    "Aliases" ( cslice "urstaff" "removestaff" )
    "Template" "unregisterstaff"
)
( sdict
    "Type" "Command"
    "Trigger" "Rank"
    "Aliases" ( cslice "level" )
    "Template" "rank"
)
) }}

{{ if hasPrefix .Message.Content .ServerPrefix }}
    {{/*"DEBUG: Command recieved"*/}}
    {{ $ = execTemplate "setCmdContext" $ }}
    {{ range $customCommands }}
        {{/*"{{/*"DEBUG: Ranging command ```json"*/}}
        {{/*"{{ json . }}```"*/}}
        {{ if and ( eq .Type "Command" ) }}
            {{ $run := false }}
            {{ if ( eq ( lower .Trigger ) ( lower $.Cmd ) ) }}
                {{ $run = true }}
            {{ else }}
                {{ range .Aliases }}
                    {{ if ( eq ( lower . ) ( lower $.Cmd ) ) }}
                        {{ $run = true }}
                        {{ break }}
                    {{ end }}
                {{ end }}
            {{ end }}
            {{ if not $run }}
                {{ continue }}
            {{ end }}
            {{/*"DEBUG: Command matched"*/}}
            {{ if eq .Template "devtest" }}
                {{ template "devtest" $ }}
            {{ else if eq .Template "registerstaff" }}
                {{ $.Set "Register" true }}
                {{ template "registerstaff" $ }}
            {{ else if eq .Template "unregisterstaff" }}
                {{ $.Set "Register" false }}
                {{ template "registerstaff" $ }}
            {{ else if eq .Template "rank" }}
                {{ template "rank" $ }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}



{{ $.Set "Levels" ( dict
0 0
1 100
2 255
3 475
4 770
5 1150
6 1625
7 2205
8 2900
9 3720
10 4675
11 5775
12 7030
13 8450
14 10045
15 11825
16 13800
17 15980
18 18375
19 20995
20 23850
21 26950
22 30305
23 33925
24 37820
25 42000
26 46475
27 51255
28 56350
29 61770
30 67525
31 73625
32 80080
33 86900
34 94095
35 101675
36 109650
37 118030
38 126825
39 136045
40 145700
41 155800
42 166355
43 177375
44 188870
45 200850
46 213325
47 226305
48 239800
49 253820
50 268375
51 283475
52 299130
53 315350
54 332145
55 349525
56 367500
57 386080
58 405275
59 425095
60 445550
61 466650
62 488405
63 510825
64 533920
65 557700
66 582175
67 607355
68 633250
69 659870
70 687225
71 715325
72 744180
73 773800
74 804195
75 835375
76 867350
77 900130
78 933725
79 968145
80 1003400
81 1039500
82 1076455
83 1114275
84 1152970
85 1192550
86 1233025
87 1274405
88 1316700
89 1359920
90 1404075
91 1449175
92 1495230
93 1542250
94 1590245
95 1639225
96 1689200
97 1740180
98 1792175
99 1845195
100 1899250
) }}

{{ block "level" $ }}
    {{ with ( $db := dbGet .User.ID "levelling" ) }}
        {{ if ( ( dbGet $.User.ID "xp" ).UpdatedAt.Before ( currentTime.Sub $.TimeMinute ) ) }}
            {{ $xp := dbIncr $.User.ID "xp" ( randInt 10 15 ) | toInt }}
            {{ $rank := dbRank ( sdict "pattern" "xp" ) $.User.ID "xp" }}
            {{ if ge $xp ( .Levels.Get ( add 1 .LastLevel ) ) }}
                {{ sendMessage nil ( cembed
                    "title" ( printf "%s just reached level %d!" ( or $.Member.Nick $.User.Username ) ( add .LastLevel 1 ) )
                    "thumbnail" ( sdict "url" ( .User.AvatarURL "1024" ) )
                    "description" ( printf "They are #%d in %s with %d XP" $rank $.Guild.Name $xp )
                    "color" ( randInt 0xFFFFFF )
                ) }}
                {{ $db.Set "LastLevel" ( add $db.LastLevel 1 ) }}
                {{ dbSet .User.ID "levelling" $db }}
            {{ end }}
        {{ end }}
    {{ else }}
        {{ dbSet .User.ID "levelling" ( sdict
            "LastLevel" 0
        ) }}
        {{ dbIncr .User.ID "xp" 10 }}
    {{ end }}
{{ end }}