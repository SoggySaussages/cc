{{ $ := sdict . }}
{{if not .User.ID}}
    {{return}}
{{end}}
{{/*"{{ $arg := index ( shuffle ( cslice ( json .Message ) ( json .Channel ) ( json .Member ) ) ) 0 }}"*/}}
{{/*"{{ sendMessage 1051352470221230141 ( joinStr "\n" "DEBUG: Message recieved:```json" $arg "```" ) }}"*/}}

{{ define "devtest" }}
    {{ $db := sdict 
        "OnServer" true
        "Agreed" false
        "Staff" false
    }}
    {{ with ( dbGet .User.ID "member" ) }}
        {{ $db = .Value }}
    {{ end }}
    {{ if not $db.Staff }}
        {{ sendMessage nil "You don't have permission to use that command!" }}
        {{ return }}
    {{ end }}
    {{ sendMessage .Channel.ID ( cembed "description" "DEBUG" ) }}
{{ end }}

{{ define "registerstaff" }}
    {{ if not ( hasPermissions .Permissions.Administrator ) }}
        {{ sendMessage nil "You don't have permission to use that command!" }}
        {{ return }}
    {{ end }}
    {{ if eq ( len .CmdArgs ) 0 }}
        {{ sendMessage nil ( printf "Invalid syntax!\nUsage: `%s%s [User] ...` (Multiple selections available)" .ServerPrefix .Cmd ) }}
    {{ end }}
    {{ $out := cslice }}
    {{ range .CmdArgs }}
        {{ try }}
            {{ with userArg . }}
                {{ $db := sdict
                    "OnServer" true
                    "Agreed" true
                    "Staff" true
                }}
                {{ with dbGet .ID "member" }}
                    {{ $db = . }}
                {{ end }}
                {{ $db.Set "Staff" .Register }}
                {{ dbSet .ID "member" $db }}
                {{ $reg := "Unregistered" }}
                {{ if .Register }}
                    {{ $reg = "Registered" }}
                {{ end }}
                {{ $out = $out.Append ( printf "%s **%s** as a staff member." $reg .String ) }}
            {{ end }}
        {{ catch }}
            {{ $out = $out.Append ( printf "Failed to modify registration of **%s** as a staff member." . ) }}
        {{ end }}
    {{ end }}
{{ end }}


{{ define "setCmdContext" }}
    {{ $ := sdict . }}
    {{ $.Set "Args" ( split .Message.Content " " ) }}
    {{ if gt ( len $.Args ) 1 }}
        {{ $.Set "CmdArgs" ( slice $.Args 1 ) }}
        {{ $.Set "StrippedMsg" ( joinStr " " $.CmdArgs ) }}
    {{ end }}
    {{ $.Set "Cmd" ( slice ( index $.Args 0 ) ( len .ServerPrefix ) ) }}
    {{ return $ }}
{{ end }}

{{ $customCommands := cslice }}

{{ $customCommands = $customCommands.AppendSlice ( cslice
( sdict
    "Type" "Command"
    "Trigger" "Devtest"
    "Aliases" cslice
    "Template" "devtest"
)
( sdict
    "Type" "Command"
    "Trigger" "RegisterStaff"
    "Aliases" ( cslice "staff" "rstaff" "addstaff" )
    "Template" "registerstaff"
)
( sdict
    "Type" "Command"
    "Trigger" "UnregisterStaff"
    "Aliases" ( cslice "urstaff" "removestaff" )
    "Template" "unregisterstaff"
)
) }}

{{ if hasPrefix .Message.Content .ServerPrefix }}
    {{/*"DEBUG: Command recieved"*/}}
    {{ $ = execTemplate "setCmdContext" $ }}
    {{ range $customCommands }}
        {{/*"{{/*"DEBUG: Ranging command ```json"*/}}
        {{/*"{{ json . }}```"*/}}
        {{ if and ( eq .Type "Command" ) }}
            {{ $run := false }}
            {{ if ( eq ( lower .Trigger ) ( lower $.Cmd ) ) }}
                {{ $run = true }}
            {{ else }}
                {{ range .Aliases }}
                    {{ if ( eq ( lower . ) ( lower $.Cmd ) ) }}
                        {{ $run = true }}
                        {{ break }}
                    {{ end }}
                {{ end }}
            {{ end }}
            {{ if not $run }}
                {{ continue }}
            {{ end }}
            {{/*"DEBUG: Command matched"*/}}
            {{ if eq .Template "devtest" }}
                {{ template "devtest" $ }}
            {{ else if eq .Template "registerstaff" }}
                {{ $.Set "Register" true }}
                {{ template "registerstaff" $ }}
            {{ else if eq .Template "unregisterstaff" }}
                {{ $.Set "Register" false }}
                {{ template "registerstaff" $ }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
